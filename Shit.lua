-- This file was generated using Luraph Obfuscator v12.5 by memcorrupt.

local Il1lIiliilIli1i1l1I = assert local Iilili11l1Il1iiiIii = select local iiIiliIiil1i1llliii = tonumber local l1l11i1illlIlii11Il = unpack local lIIIIIlIIlll11lii1l = pcall local I1IiIilliII1l111ii1 = setfenv local I1Ii1I1l11lII1IilIi = setmetatable local II11IIllIlIlilillli = type local lIlIi1I1llilI1liiI1 = getfenv local llililliIl1IlIiIl1i = tostring local lIl1IIli11ll1l11IiliI = error local lIll1iI1I1i111IiIl1il = string.sub local lIl1Iil111iiIlliiIIlI = string.byte local lIlli1IllllIlIliilIli = string.char local illl1Illl1Il1iiiIl1 = string.rep local lIliliIiiiliIIlIlI111 = string.gsub local i11llilIIl1Il1lIIIl = string.match local Iilii1lllii11II1Ili = table.insert local Iili1Il1Ii1llIilili = lIl1Iil111iiIlliiIIlI("<", 1) local i1liiii1lIIl1Il1lII, lIllIl1lIli11lii111Il = #{2065}, #{ 1922, 4014, 228, 852, 3425, 2522, 3048, 5864, 1636, 3258, 1074, 5587, 6039, 1020, 5379, 1899, 3432, 2378, 5470, 5436 } + Iili1Il1Ii1llIilili + 130991 local i11IillI1IIili1111I = {} local iIlIIIIi1liIi1l1Ii1 = 1 local liil1lIllI1II1Illi1, Ii1lII1lIiiIii1IIi1 local function iIlI1III1l1IIliilII(lli1IlIIl1Ii1llIi1l, llI1il1ilIll1Ii1i1l) local lii11il1l111111iI1I lli1IlIIl1Ii1llIi1l = lIliliIiiiliIIlIlI111(lIll1iI1I1i111IiIl1il(lli1IlIIl1Ii1llIi1l, 5), "..", function(Ii1Ii1li11lI1111Il1) if lIl1Iil111iiIlliiIIlI(Ii1Ii1li11lI1111Il1, 2) == 72 then lii11il1l111111iI1I = iiIiliIiil1i1llliii(lIll1iI1I1i111IiIl1il(Ii1Ii1li11lI1111Il1, 1, 1)) return "" else local llIlli1l11l11IiliIi = lIlli1IllllIlIliilIli(iiIiliIiil1i1llliii(Ii1Ii1li11lI1111Il1, 16)) if lii11il1l111111iI1I then local l1IIi1I1ll11i1llIii = illl1Illl1Il1iiiIl1(llIlli1l11l11IiliIi, lii11il1l111111iI1I) lii11il1l111111iI1I = nil return l1IIi1I1ll11i1llIii else return llIlli1l11l11IiliIi end end end) local function Il1II1i1iIiiiIIl1iI() local lIlil1lI1i1IIil111iil = lIl1Iil111iiIlliiIIlI(lli1IlIIl1Ii1llIi1l, iIlIIIIi1liIi1l1Ii1, iIlIIIIi1liIi1l1Ii1) iIlIIIIi1liIi1l1Ii1 = iIlIIIIi1liIi1l1Ii1 + 1 return lIlil1lI1i1IIil111iil end local function i1llI1llI1I1lIiiII1() local lIlil1lI1i1IIil111iil, llIlli1l11l11IiliIi, l1IIi1I1ll11i1llIii, IIlll1li1ii11li1IiI = lIl1Iil111iiIlliiIIlI(lli1IlIIl1Ii1llIi1l, iIlIIIIi1liIi1l1Ii1, iIlIIIIi1liIi1l1Ii1 + 3) iIlIIIIi1liIi1l1Ii1 = iIlIIIIi1liIi1l1Ii1 + 4 return IIlll1li1ii11li1IiI * 16777216 + l1IIi1I1ll11i1llIii * 65536 + llIlli1l11l11IiliIi * 256 + lIlil1lI1i1IIil111iil end local function lil1111IliiIIilllll(liliI1Il11i1IiiiiI1, IIIiIiIIi11Il1i1I1l, lIl1I11IiIIII1II1IliI) if lIl1I11IiIIII1II1IliI then local IIIIiiIlli1I1iiil11, lIlil1IIIlIlIIiIl1lll = 0, 0 for lIlllI1i11iIi11l1Ilil = IIIiIiIIi11Il1i1I1l, lIl1I11IiIIII1II1IliI do IIIIiiIlli1I1iiil11 = IIIIiiIlli1I1iiil11 + 2 ^ lIlil1IIIlIlIIiIl1lll * lil1111IliiIIilllll(liliI1Il11i1IiiiiI1, lIlllI1i11iIi11l1Ilil) lIlil1IIIlIlIIiIl1lll = lIlil1IIIlIlIIiIl1lll + 1 end return IIIIiiIlli1I1iiil11 else local lIl11III1l1Ilii1l11iI = 2 ^ (IIIiIiIIi11Il1i1I1l - 1) return lIl11III1l1Ilii1l11iI <= liliI1Il11i1IiiiiI1 % (lIl11III1l1Ilii1l11iI + lIl11III1l1Ilii1l11iI) and 1 or 0 end end local function Il1i1iIIliIlII1iill() local lIlil1lI1i1IIil111iil, llIlli1l11l11IiliIi = i1llI1llI1I1lIiiII1(), i1llI1llI1I1lIiiII1() if lIlil1lI1i1IIil111iil == 0 and llIlli1l11l11IiliIi == 0 then return 0 end return (-2 * lil1111IliiIIilllll(llIlli1l11l11IiliIi, 32) + 1) * 2 ^ (lil1111IliiIIilllll(llIlli1l11l11IiliIi, 21, 31) - 1023) * ((lil1111IliiIIilllll(llIlli1l11l11IiliIi, 1, 20) * 4294967296 + lIlil1lI1i1IIil111iil) / 4503599627370496 + 1) end local lIll1lIlllI1liI1Iil1i = bit or bit32 local lIli1I1lIIiliIlilllii = lIll1lIlllI1liI1Iil1i and lIll1lIlllI1liI1Iil1i.bxor or function(lIlil1lI1i1IIil111iil, llIlli1l11l11IiliIi) local Iil11iIlII1IllIII1I = 1 local l1IIi1I1ll11i1llIii = 0 while lIlil1lI1i1IIil111iil > 0 and llIlli1l11l11IiliIi > 0 do local IIliiIlI1ilililil1i = lIlil1lI1i1IIil111iil % 2 local ilI111l1l1llI1liIII = llIlli1l11l11IiliIi % 2 if IIliiIlI1ilililil1i ~= ilI111l1l1llI1liIII then l1IIi1I1ll11i1llIii = l1IIi1I1ll11i1llIii + Iil11iIlII1IllIII1I end lIlil1lI1i1IIil111iil = (lIlil1lI1i1IIil111iil - IIliiIlI1ilililil1i) / 2 llIlli1l11l11IiliIi = (llIlli1l11l11IiliIi - ilI111l1l1llI1liIII) / 2 Iil11iIlII1IllIII1I = Iil11iIlII1IllIII1I * 2 end if lIlil1lI1i1IIil111iil < llIlli1l11l11IiliIi then lIlil1lI1i1IIil111iil = llIlli1l11l11IiliIi end while lIlil1lI1i1IIil111iil > 0 do local IIliiIlI1ilililil1i = lIlil1lI1i1IIil111iil % 2 if IIliiIlI1ilililil1i > 0 then l1IIi1I1ll11i1llIii = l1IIi1I1ll11i1llIii + Iil11iIlII1IllIII1I end lIlil1lI1i1IIil111iil = (lIlil1lI1i1IIil111iil - IIliiIlI1ilililil1i) / 2 Iil11iIlII1IllIII1I = Iil11iIlII1IllIII1I * 2 end return l1IIi1I1ll11i1llIii end local function l111IIIil11I1llI1iI(IIlillll1ii1illIiII) local Ii11IlIl1iilliiiI11 = { lIl1Iil111iiIlliiIIlI(lli1IlIIl1Ii1llIi1l, iIlIIIIi1liIi1l1Ii1, iIlIIIIi1liIi1l1Ii1 + 3) } iIlIIIIi1liIi1l1Ii1 = iIlIIIIi1liIi1l1Ii1 + 4 local lIlil1lI1i1IIil111iil = lIli1I1lIIiliIlilllii(Ii11IlIl1iilliiiI11[1], Ii1lII1lIiiIii1IIi1) local llIlli1l11l11IiliIi = lIli1I1lIIiliIlilllii(Ii11IlIl1iilliiiI11[2], Ii1lII1lIiiIii1IIi1) local l1IIi1I1ll11i1llIii = lIli1I1lIIiliIlilllii(Ii11IlIl1iilliiiI11[3], Ii1lII1lIiiIii1IIi1) local IIlll1li1ii11li1IiI = lIli1I1lIIiliIlilllii(Ii11IlIl1iilliiiI11[4], Ii1lII1lIiiIii1IIi1) Ii1lII1lIiiIii1IIi1 = (109 * Ii1lII1lIiiIii1IIi1 + IIlillll1ii1illIiII) % 256 return IIlll1li1ii11li1IiI * 16777216 + l1IIi1I1ll11i1llIii * 65536 + llIlli1l11l11IiliIi * 256 + lIlil1lI1i1IIil111iil end local function lIll11l111Ii11ll11iii(ii1llII1liiilll11Ii) local l11iIlliiIII1l1IlI1 = i1llI1llI1I1lIiiII1() local i11iIIIiIiill1il1Ii = "" for lIlllI1i11iIi11l1Ilil = i1liiii1lIIl1Il1lII, l11iIlliiIII1l1IlI1 do i11iIIIiIiill1il1Ii = i11iIIIiIiill1il1Ii .. lIlli1IllllIlIliilIli(lIli1I1lIIiliIlilllii(lIl1Iil111iiIlliiIIlI(lli1IlIIl1Ii1llIi1l, iIlIIIIi1liIi1l1Ii1 + lIlllI1i11iIi11l1Ilil - 1), liil1lIllI1II1Illi1)) liil1lIllI1II1Illi1 = (ii1llII1liiilll11Ii * liil1lIllI1II1Illi1 + 15) % 256 end iIlIIIIi1liIi1l1Ii1 = iIlIIIIi1liIi1l1Ii1 + l11iIlliiIII1l1IlI1 return i11iIIIiIiill1il1Ii end liil1lIllI1II1Illi1 = Il1II1i1iIiiiIIl1iI() Ii1lII1lIiiIii1IIi1 = Il1II1i1iIiiiIIl1iI() local lIliIIIlIIl1llI11Iii1 = {} for lIlllI1i11iIi11l1Ilil = i1liiii1lIIl1Il1lII, Il1II1i1iIiiiIIl1iI() do local lIlllIililIillillliIi = Il1II1i1iIiiiIIl1iI() local lIl11l1I111lIlIIIiIIi = (lIlllI1i11iIi11l1Ilil - 1) * 2 lIliIIIlIIl1llI11Iii1[lIl11l1I111lIlIIIiIIi] = lil1111IliiIIilllll(lIlllIililIillillliIi, 1, 4) lIliIIIlIIl1llI11Iii1[lIl11l1I111lIlIIIiIIi + 1] = lil1111IliiIIilllll(lIlllIililIillillliIi, 5, 8) end local function ii1IIllI1iiill1Il1I() local lIllIllilIilIiIiI1iII = { nil, {}, nil, nil, {}, {}, {} } i1llI1llI1I1lIiiII1() local Il1I1I1Ii1ill1lllIi = i1llI1llI1I1lIiiII1() - (#{ 4275, 6348, 5858, 5523, 3935, 1355, 4013, 1538, 3827, 941, 1219, 6848, 2952, 1581, 1926, 3869, 1089, 2951, 1271, 6083 } + Iili1Il1Ii1llIilili + 133704) local lIlii1iIliIliiIlilIiI = Il1II1i1iIiiiIIl1iI() for lIlllI1i11iIi11l1Ilil = i1liiii1lIIl1Il1lII, Il1I1I1Ii1ill1lllIi do local IiiilIIIlll11111IiI local II11IIllIlIlilillli = Il1II1i1iIiiiIIl1iI() if II11IIllIlIlilillli == #{ 1563, 5684, 5494, 1945, 5751, 4339, 5008, 6013, 1895, 6847, 95, 2837, 6265, 2116, 4732, 6538, 5990, 3750, 5538, 4396, 3617, 6173, 707, 6515 } + Iili1Il1Ii1llIilili + 24 then IiiilIIIlll11111IiI = Il1i1iIIliIlII1iill() end if II11IIllIlIlilillli == #{ 6955, 1385, 4927, 6241, 6318, 5028, 565, 2874, 3090, 4757, 924, 2336, 808, 235, 4343, 6883, 5938, 4334, 2450, 6355, 786 } + Iili1Il1Ii1llIilili + 57 then IiiilIIIlll11111IiI = i1llI1llI1I1lIiiII1() end if II11IIllIlIlilillli == #{ 3667, 5843, 5370, 6561, 3441, 3518, 3178, 3734, 4603, 3491, 751, 1249, 6511, 3939, 159, 4795, 4027, 3794, 5107, 2792, 787, 5083, 6642, 6039 } + Iili1Il1Ii1llIilili + 163 then IiiilIIIlll11111IiI = Il1i1iIIliIlII1iill() + Il1i1iIIliIlII1iill() end if II11IIllIlIlilillli == #{ 5639, 3333, 6835, 918, 6951, 4683, 2787, 6822, 123, 2339, 1522, 6525, 4582, 5830, 3548, 3531, 2444, 4287, 6075, 4342 } + Iili1Il1Ii1llIilili + -20 then IiiilIIIlll11111IiI = #{ 1968, 382, 3309, 393, 593, 5795, 4540, 5240, 5995, 4045, 2376, 1321, 4743, 6785, 822, 45, 3647, 608, 253, 1118 } + Iili1Il1Ii1llIilili + 76606 == #{ 1968, 382, 3309, 393, 593, 5795, 4540, 5240, 5995, 4045, 2376, 1321, 4743, 6785, 822, 45, 3647, 608, 253, 1118 } + Iili1Il1Ii1llIilili + 76606 end if II11IIllIlIlilillli == #{ 4626, 224, 5455, 579, 2328, 5626, 1880, 1944, 1384, 1969, 884 } then IiiilIIIlll11111IiI = lIll1iI1I1i111IiIl1il(lIll11l111Ii11ll11iii(insEncKey), #{ 6908, 6812, 4494 }) end if II11IIllIlIlilillli == #{ 5437, 4405, 3836, 4088, 5899, 553, 2216, 1262, 6743, 1341, 6933, 1784, 6137, 245, 4778, 3141, 3482 } then IiiilIIIlll11111IiI = #{ 2719, 2369, 2730, 3464, 3393, 3338, 1033, 4976, 1816, 1150, 6085, 2495, 6360, 3187, 4028, 478, 184, 5642, 6454, 647 } + Iili1Il1Ii1llIilili + 12472 == #{ 4281, 1430, 981, 3200, 3694, 5669, 5714, 1318, 322, 6744, 180, 2780, 5378, 6203, 1912, 3338, 3542, 2479, 2543, 6240, 3106, 971, 5367 } + Iili1Il1Ii1llIilili + 123307 end if II11IIllIlIlilillli == #{ 4592, 1890, 38, 6544, 5890, 5340, 363, 5116, 2954, 56, 5227, 5767, 4495, 2843, 4745, 2916, 2894, 6347, 1306, 6157, 5599, 5485, 6386, 4159 } + Iili1Il1Ii1llIilili + 126 then IiiilIIIlll11111IiI = Il1i1iIIliIlII1iill() end if II11IIllIlIlilillli == #{ 3981, 6298, 2844, 1542, 5910, 3955, 2845, 1346, 1761, 389, 4675, 424, 2790, 4135, 534, 237, 5979, 5393, 4300, 492, 1300, 6026 } + Iili1Il1Ii1llIilili + -24 then IiiilIIIlll11111IiI = lIll1iI1I1i111IiIl1il(lIll11l111Ii11ll11iii(lIlii1iIliIliiIlilIiI), #{ 2437, 5812, 6686, 2627, 6351 }) end if II11IIllIlIlilillli == #{ 2286, 4942, 4585, 1611, 1902, 1655, 4956, 1534, 5100, 897, 5238, 4818, 3091, 53, 3275, 5066, 688, 127, 1952, 382, 2059, 5100 } + Iili1Il1Ii1llIilili + 38 then IiiilIIIlll11111IiI = lIll1iI1I1i111IiIl1il(lIll11l111Ii11ll11iii(lIlii1iIliIliiIlilIiI), #{6035, 6357}) end lIllIllilIilIiIiI1iII[7][lIlllI1i11iIi11l1Ilil - i1liiii1lIIl1Il1lII] = IiiilIIIlll11111IiI end Il1II1i1iIiiiIIl1iI() i1llI1llI1I1lIiiII1() i1llI1llI1I1lIiiII1() Il1II1i1iIiiiIIl1iI() local Il1I1I1Ii1ill1lllIi = i1llI1llI1I1lIiiII1() for lIlllI1i11iIi11l1Ilil = i1liiii1lIIl1Il1lII, Il1I1I1Ii1ill1lllIi do lIllIllilIilIiIiI1iII[2][lIlllI1i11iIi11l1Ilil] = i1llI1llI1I1lIiiII1() end local iliiIli1Ill111iIiii = i1llI1llI1I1lIiiII1() - (#{ 2924, 4990, 1721, 3191, 2919, 1337, 5748, 6457, 473, 155, 5767, 5017, 5860, 2710, 2678, 6496, 1861, 2028, 2336, 1096, 3798 } + Iili1Il1Ii1llIilili + 133709) local IIlII1I1I11l1IiIiiI = Il1II1i1iIiiiIIl1iI() for lIlllI1i11iIi11l1Ilil = i1liiii1lIIl1Il1lII, iliiIli1Ill111iIiii do local ili1iliilIlI1Ili1i1 = { nil, nil, nil, nil, nil, nil, nil, nil, nil, nil } local lIlllIililIillillliIi = l111IIIil11I1llI1iI(IIlII1I1I11l1IiIiiI) ili1iliilIlI1Ili1i1[1] = lil1111IliiIIilllll(lIlllIililIillillliIi, #{6908}, #{ 3171, 802, 3056, 808, 867, 6814, 479, 5905, 1934 }) ili1iliilIlI1Ili1i1[2] = lil1111IliiIIilllll(lIlllIililIillillliIi, #{ 5266, 3458, 4588, 981, 5999, 5845, 2939, 5935, 2460, 59 }, #{ 1266, 6531, 185, 1930, 5487, 3236, 5533, 3966, 664, 6156, 4786, 672, 5004, 5990, 4978, 2488, 3, 2260 }) ili1iliilIlI1Ili1i1[7] = lil1111IliiIIilllll(lIlllIililIillillliIi, #{3571}, #{ 2266, 4568, 2317, 2282, 731, 2277, 3467, 678, 69, 6235, 3783, 3620, 4390, 2011, 5876, 970, 3902, 946 }) ili1iliilIlI1Ili1i1[10] = lil1111IliiIIilllll(lIlllIililIillillliIi, #{ 4784, 927, 3938, 4767, 3836, 2104, 4904, 424, 6510, 6518, 2423, 6264, 2201, 3469, 5541, 821, 472, 5430, 1013, 3105 } + Iili1Il1Ii1llIilili + -53, #{ 3259, 94, 492, 3316, 6882, 111, 34, 6658, 6398, 796, 5384, 896, 5801, 2308, 749, 2617, 5441, 6617, 136, 5097, 2928 } + Iili1Il1Ii1llIilili + -49) ili1iliilIlI1Ili1i1[8] = lil1111IliiIIilllll(lIlllIililIillillliIi, #{ 3719, 821, 4279, 5817, 5018, 4264, 1181, 6075, 6318, 2892, 4363, 5314, 4168, 241, 5916, 4602, 3017, 5602, 202 }, #{ 4091, 5174, 4772, 5251, 1475, 1141, 3071, 5814, 18, 6477, 4221, 5766, 4426, 3400, 2965, 814, 2643, 613, 1540, 2620, 6580 } + Iili1Il1Ii1llIilili + -55) lIllIllilIilIiIiI1iII[6][lIlllI1i11iIi11l1Ilil] = ili1iliilIlI1Ili1i1 end for lIlllI1i11iIi11l1Ilil = i1liiii1lIIl1Il1lII, iliiIli1Ill111iIiii do local ili1iliilIlI1Ili1i1 = lIllIllilIilIiIiI1iII[6][lIlllI1i11iIi11l1Ilil] local lIl1IIIIiil1i1llI1Ill = lIliIIIlIIl1llI11Iii1[ili1iliilIlI1Ili1i1[10]] if lIl1IIIIiil1i1llI1Ill == #{ 6424, 2768, 226, 3493 } then ili1iliilIlI1Ili1i1[5] = lIllIllilIilIiIiI1iII[7][ili1iliilIlI1Ili1i1[7]] end if lIl1IIIIiil1i1llI1Ill == #{3913} and ili1iliilIlI1Ili1i1[1] > 255 then ili1iliilIlI1Ili1i1[9] = true ili1iliilIlI1Ili1i1[3] = lIllIllilIilIiIiI1iII[7][ili1iliilIlI1Ili1i1[1] - 256] end if lIl1IIIIiil1i1llI1Ill == #{ 149, 518, 3283 } then if ili1iliilIlI1Ili1i1[1] > 255 then ili1iliilIlI1Ili1i1[9] = true ili1iliilIlI1Ili1i1[3] = lIllIllilIilIiIiI1iII[7][ili1iliilIlI1Ili1i1[1] - 256] end if ili1iliilIlI1Ili1i1[2] > 255 then ili1iliilIlI1Ili1i1[6] = true ili1iliilIlI1Ili1i1[4] = lIllIllilIilIiIiI1iII[7][ili1iliilIlI1Ili1i1[2] - 256] end end if lIl1IIIIiil1i1llI1Ill == #{2378, 6173} and ili1iliilIlI1Ili1i1[2] > 255 then ili1iliilIlI1Ili1i1[6] = true ili1iliilIlI1Ili1i1[4] = lIllIllilIilIiIiI1iII[7][ili1iliilIlI1Ili1i1[2] - 256] end end lIllIllilIilIiIiI1iII[3] = Il1II1i1iIiiiIIl1iI() lIllIllilIilIiIiI1iII[1] = Il1II1i1iIiiiIIl1iI() i1llI1llI1I1lIiiII1() Il1II1i1iIiiiIIl1iI() Il1II1i1iIiiiIIl1iI() Il1II1i1iIiiiIIl1iI() Il1II1i1iIiiiIIl1iI() local Il1I1I1Ii1ill1lllIi = i1llI1llI1I1lIiiII1() for lIlllI1i11iIi11l1Ilil = i1liiii1lIIl1Il1lII, Il1I1I1Ii1ill1lllIi do lIllIllilIilIiIiI1iII[5][lIlllI1i11iIi11l1Ilil - i1liiii1lIIl1Il1lII] = ii1IIllI1iiill1Il1I() end lIllIllilIilIiIiI1iII[4] = Il1II1i1iIiiiIIl1iI() i1llI1llI1I1lIiiII1() i1llI1llI1I1lIiiII1() return lIllIllilIilIiIiI1iII end local function lIl1li1IIIll1lIl1111I(lIllIllilIilIiIiI1iII, llI1il1ilIll1Ii1i1l, li111iIlIlI111IiiII) local ilI11iIiii1lliIIIii, iIiIlI1iilil1lilIlI = 22, 7 local lll1Illi1II11iIi1Il = lIllIllilIilIiIiI1iII[6] local il1ill1I1I1iIIiii11 = 1 local iiIi1ll11iIIIIi111I = lIllIllilIilIiIiI1iII[5] local IlII1i1iill1IlII1il = lIllIllilIilIiIiI1iII[4] local lIlliii1Iilii1ii1iIii = lIllIllilIilIiIiI1iII[3] local i1liliIII1I1II1iIlI = 10 local I1il11l1Ii1111IIII1 = lIllIllilIilIiIiI1iII[2] local lI1II1iillll11l1Iii = 1 local function lIiiIi11IIiili11i1i(...) local lIliiII1III1I11liII11 = 0 local ii11iIi1llllI1I1i1I = { l1l11i1illlIlii11Il({}, 1, lIlliii1Iilii1ii1iIii) } local lI1i1IiIII1IlliiiI1 = 1 local iii1ll1l111iliIIIli = {} local lliil1IIIlillIlI1lI = {} local llI1il1ilIll1Ii1i1l = lIlIi1I1llilI1liiI1() local iil11il11IIlili1ii1 = { ... } local llII11i1i1ii1liliii = #iil11il11IIlili1ii1 - 1 for lIlllI1i11iIi11l1Ilil = 0, llII11i1i1ii1liliii do if lIlllI1i11iIi11l1Ilil < IlII1i1iill1IlII1il then ii11iIi1llllI1I1i1I[lIlllI1i11iIi11l1Ilil] = iil11il11IIlili1ii1[lIlllI1i11iIi11l1Ilil + 1] end end local function Il11llIiIIiIlIiI1i1(...) local l1IIi1I1ll11i1llIii = Iilili11l1Il1iiiIii("#", ...) local liliI111111lI1llill = { ... } return l1IIi1I1ll11i1llIii, liliI111111lI1llill end local function Iil1iilili1i1Iii11l() while true do local lIliii1l1iil1Il1IIili = lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] local lIli1l1I11il1liiillIl = lIliii1l1iil1Il1IIili[10] lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 + 1 if lIli1l1I11il1liiillIl < 11 then if lIli1l1I11il1liiillIl >= 5 then if lIli1l1I11il1liiillIl >= 8 then if lIli1l1I11il1liiillIl < 9 then if lIliii1l1iil1Il1IIili[2] == 68 then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 - 1 lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] = { [10] = 7, [8] = (lIliii1l1iil1Il1IIili[8] - 134) % 256, [1] = (lIliii1l1iil1Il1IIili[1] - 134) % 256 } elseif lIliii1l1iil1Il1IIili[2] == 252 then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 - 1 lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] = { [10] = 6, [8] = (lIliii1l1iil1Il1IIili[8] - 152) % 256, [1] = (lIliii1l1iil1Il1IIili[1] - 152) % 256 } else iii1ll1l111iliIIIli[ii11iIi1llllI1I1i1I] = nil local l1lI1llIl1lIiIll1I1 = lIliii1l1iil1Il1IIili[8] local i1illi1llIiIi1111l1 = lIliii1l1iil1Il1IIili[1] if i1illi1llIiIi1111l1 == 1 then return true end local iiI111iiiI1lIll1Il1 = l1lI1llIl1lIiIll1I1 + i1illi1llIiIi1111l1 - 2 if i1illi1llIiIi1111l1 == 0 then iiI111iiiI1lIll1Il1 = lIliiII1III1I11liII11 end return true, l1lI1llIl1lIiIll1I1, iiI111iiiI1lIll1Il1 end elseif lIli1l1I11il1liiillIl == 10 then local lIliiIIiiIll11I1liIlI = iiIi1ll11iIIIIi111I[lIliii1l1iil1Il1IIili[7]] local IIiliiI1illlil1ilII = {} if lIliiIIiiIll11I1liIlI[il1ill1I1I1iIIiii11] > 0 then do local l1iliiliil1ilIIiil1 = {} IIiliiI1illlil1ilII = I1Ii1I1l11lII1IilIi({}, { __index = function(liliI111111lI1llill, li1111lillIiIiiliii) local lIliiiI1ilIl1111llIil = l1iliiliil1ilIIiil1[li1111lillIiIiiliii] return lIliiiI1ilIl1111llIil[1][lIliiiI1ilIl1111llIil[2]] end, __newindex = function(liliI111111lI1llill, li1111lillIiIiiliii, IiiiI11IIll1lillliI) local lIliiiI1ilIl1111llIil = l1iliiliil1ilIIiil1[li1111lillIiIiiliii] lIliiiI1ilIl1111llIil[1][lIliiiI1ilIl1111llIil[2]] = IiiiI11IIll1lillliI end }) for lIlllI1i11iIi11l1Ilil = 1, lIliiIIiiIll11I1liIlI[il1ill1I1I1iIIiii11] do local Ili1lliII1lii1li1I1 = lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] if Ili1lliII1lii1li1I1[i1liliIII1I1II1iIlI] == ilI11iIiii1lliIIIii then l1iliiliil1ilIIiil1[lIlllI1i11iIi11l1Ilil - 1] = { ii11iIi1llllI1I1i1I, Ili1lliII1lii1li1I1[lI1II1iillll11l1Iii] } elseif Ili1lliII1lii1li1I1[i1liliIII1I1II1iIlI] == iIiIlI1iilil1lilIlI then l1iliiliil1ilIIiil1[lIlllI1i11iIi11l1Ilil - 1] = { li111iIlIlI111IiiII, Ili1lliII1lii1li1I1[lI1II1iillll11l1Iii] } end lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 + 1 end if not iii1ll1l111iliIIIli[ii11iIi1llllI1I1i1I] then iii1ll1l111iliIIIli[ii11iIi1llllI1I1i1I] = {l1iliiliil1ilIIiil1} else Iilii1lllii11II1Ili(iii1ll1l111iliIIIli[ii11iIi1llllI1I1i1I], l1iliiliil1ilIIiil1) end end end local iIIl1II1IiIliIII1li = lIl1li1IIIll1lIl1111I(lIliiIIiiIll11I1liIlI, llI1il1ilIll1Ii1i1l, IIiliiI1illlil1ilII) ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = iIIl1II1IiIliIII1li else local l1IIi1I1ll11i1llIii if lIliii1l1iil1Il1IIili[6] then l1IIi1I1ll11i1llIii = lIliii1l1iil1Il1IIili[4] else l1IIi1I1ll11i1llIii = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[2]] end ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[1]][l1IIi1I1ll11i1llIii] end elseif lIli1l1I11il1liiillIl >= 6 then if lIli1l1I11il1liiillIl ~= 7 then local lIll1iI1l111III1Iiili = lIliii1l1iil1Il1IIili[8] local lIlliiiili1liililI1ii = {} for lIlillllilI1li1lilI1I, l1iliiliil1ilIIiil1 in pairs(iii1ll1l111iliIIIli[ii11iIi1llllI1I1i1I]) do for lIlillllilI1li1lilI1I, lIliiiI1ilIl1111llIil in pairs(l1iliiliil1ilIIiil1) do if lIliiiI1ilIl1111llIil[1] == ii11iIi1llllI1I1i1I and lIll1iI1l111III1Iiili <= lIliiiI1ilIl1111llIil[2] then local lIlIl1lliIIiiil1IiIIl = lIliiiI1ilIl1111llIil[2] if not lIlliiiili1liililI1ii[lIlIl1lliIIiiil1IiIIl] then lIl1li1IIIll1lIl1111I(lliil1IIIlillIlI1lI, ii11iIi1llllI1I1i1I[lIlIl1lliIIiiil1IiIIl]) lIlliiiili1liililI1ii[lIlIl1lliIIiiil1IiIIl] = #lliil1IIIlillIlI1lI end lIliiiI1ilIl1111llIil[1] = lliil1IIIlillIlI1lI lIliiiI1ilIl1111llIil[2] = lIlliiiili1liililI1ii[lIlIl1lliIIiiil1IiIIl] end end end else ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = li111iIlIlI111IiiII[lIliii1l1iil1Il1IIili[1]] end else local ilIli1illlI11i111lI = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[1]] local l1IIi1I1ll11i1llIii if lIliii1l1iil1Il1IIili[6] then l1IIi1I1ll11i1llIii = lIliii1l1iil1Il1IIili[4] else l1IIi1I1ll11i1llIii = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[2]] end ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8] + 1] = ilIli1illlI11i111lI ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = ilIli1illlI11i111lI[l1IIi1I1ll11i1llIii] end elseif lIli1l1I11il1liiillIl < 2 then if lIli1l1I11il1liiillIl ~= 1 then if lIliii1l1iil1Il1IIili[1] == 197 then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 - 1 lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] = { [10] = 22, [8] = (lIliii1l1iil1Il1IIili[8] - 65) % 256, [1] = (lIliii1l1iil1Il1IIili[2] - 65) % 256 } elseif lIliii1l1iil1Il1IIili[1] == 240 then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 - 1 lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] = { [10] = 3, [8] = (lIliii1l1iil1Il1IIili[8] - 84) % 256, [1] = (lIliii1l1iil1Il1IIili[2] - 84) % 256 } elseif not not ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] == (lIliii1l1iil1Il1IIili[2] == 0) then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 + 1 end else ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = { l1l11i1illlIlii11Il(i11IillI1IIili1111I, 1, lIliii1l1iil1Il1IIili[1] == 0 and 255 or lIliii1l1iil1Il1IIili[1]) } end elseif lIli1l1I11il1liiillIl < 3 then if lIliii1l1iil1Il1IIili[2] == 59 then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 - 1 lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] = { [10] = 0, [8] = (lIliii1l1iil1Il1IIili[8] - 70) % 256, [2] = (lIliii1l1iil1Il1IIili[1] - 70) % 256 } else ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = -ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[1]] end elseif lIli1l1I11il1liiillIl ~= 4 then local l1lI1llIl1lIiIll1I1 = lIliii1l1iil1Il1IIili[8] local Il1I1I1Ii1ill1lllIi = lIliii1l1iil1Il1IIili[1] local lI11i1Iil1I1iliiIiI = Il1I1I1Ii1ill1lllIi > 0 and Il1I1I1Ii1ill1lllIi - 1 or llII11i1i1ii1liliii - IlII1i1iill1IlII1il if lI11i1Iil1I1iliiIiI < 0 then lI11i1Iil1I1iliiIiI = -1 end for lIlllI1i11iIi11l1Ilil = l1lI1llIl1lIiIll1I1, l1lI1llIl1lIiIll1I1 + lI11i1Iil1I1iliiIiI do ii11iIi1llllI1I1i1I[lIlllI1i11iIi11l1Ilil] = iil11il11IIlili1ii1[IlII1i1iill1IlII1il + (lIlllI1i11iIi11l1Ilil - l1lI1llIl1lIiIll1I1) + 1] end if Il1I1I1Ii1ill1lllIi == 0 then lIliiII1III1I11liII11 = l1lI1llIl1lIiIll1I1 + lI11i1Iil1I1iliiIiI for lIlllI1i11iIi11l1Ilil = lIliiII1III1I11liII11 + 1, lIlliii1Iilii1ii1iIii do ii11iIi1llllI1I1i1I[lIlllI1i11iIi11l1Ilil] = nil end end elseif lIliii1l1iil1Il1IIili[2] == 222 then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 - 1 lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] = { [10] = 8, [8] = (lIliii1l1iil1Il1IIili[8] - 11) % 256, [1] = (lIliii1l1iil1Il1IIili[1] - 11) % 256 } else li111iIlIlI111IiiII[lIliii1l1iil1Il1IIili[1]] = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] end elseif lIli1l1I11il1liiillIl < 17 then if lIli1l1I11il1liiillIl < 14 then if lIli1l1I11il1liiillIl < 12 then local l1lI1llIl1lIiIll1I1 = lIliii1l1iil1Il1IIili[8] local iil11il11IIlili1ii1 = lIliii1l1iil1Il1IIili[1] local Ii1I1I11lll1Iiiil11 = lIliii1l1iil1Il1IIili[2] local i1i1Iill1li1l1i1liI, iiI111iiiI1lIll1Il1, Iil1iilili1i1Iii11l if iil11il11IIlili1ii1 ~= 1 then if iil11il11IIlili1ii1 ~= 0 then iiI111iiiI1lIll1Il1 = l1lI1llIl1lIiIll1I1 + iil11il11IIlili1ii1 - 1 else iiI111iiiI1lIll1Il1 = lIliiII1III1I11liII11 end iiI111iiiI1lIll1Il1, i1i1Iill1li1l1i1liI = Il11llIiIIiIlIiI1i1(ii11iIi1llllI1I1i1I[l1lI1llIl1lIiIll1I1](l1l11i1illlIlii11Il(ii11iIi1llllI1I1i1I, l1lI1llIl1lIiIll1I1 + 1, iiI111iiiI1lIll1Il1))) else iiI111iiiI1lIll1Il1, i1i1Iill1li1l1i1liI = Il11llIiIIiIlIiI1i1(ii11iIi1llllI1I1i1I[l1lI1llIl1lIiIll1I1]()) end if Ii1I1I11lll1Iiiil11 ~= 1 then if Ii1I1I11lll1Iiiil11 ~= 0 then iiI111iiiI1lIll1Il1 = l1lI1llIl1lIiIll1I1 + Ii1I1I11lll1Iiiil11 - 2 lIliiII1III1I11liII11 = iiI111iiiI1lIll1Il1 + 1 else iiI111iiiI1lIll1Il1 = iiI111iiiI1lIll1Il1 + l1lI1llIl1lIiIll1I1 - 1 lIliiII1III1I11liII11 = iiI111iiiI1lIll1Il1 end Iil1iilili1i1Iii11l = 0 for lIlllI1i11iIi11l1Ilil = l1lI1llIl1lIiIll1I1, iiI111iiiI1lIll1Il1 do Iil1iilili1i1Iii11l = Iil1iilili1i1Iii11l + 1 ii11iIi1llllI1I1i1I[lIlllI1i11iIi11l1Ilil] = i1i1Iill1li1l1i1liI[Iil1iilili1i1Iii11l] end else lIliiII1III1I11liII11 = l1lI1llIl1lIiIll1I1 - 1 end for lIlllI1i11iIi11l1Ilil = lIliiII1III1I11liII11 + 1, lIlliii1Iilii1ii1iIii do ii11iIi1llllI1I1i1I[lIlllI1i11iIi11l1Ilil] = nil end elseif lIli1l1I11il1liiillIl ~= 13 then if lIliii1l1iil1Il1IIili[2] == 130 then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 - 1 lll1Illi1II11iIi1Il[lI1i1IiIII1IlliiiI1] = { [10] = 4, [8] = (lIliii1l1iil1Il1IIili[8] - 75) % 256, [1] = (lIliii1l1iil1Il1IIili[1] - 75) % 256 } else ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = not ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[1]] end else ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = lIliii1l1iil1Il1IIili[5] end elseif lIli1l1I11il1liiillIl < 15 then llI1il1ilIll1Ii1i1l[lIliii1l1iil1Il1IIili[5]] = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] elseif lIli1l1I11il1liiillIl == 16 then ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = llI1il1ilIll1Ii1i1l[lIliii1l1iil1Il1IIili[5]] else ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = lIliii1l1iil1Il1IIili[1] ~= 0 if lIliii1l1iil1Il1IIili[2] ~= 0 then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 + 1 end end elseif lIli1l1I11il1liiillIl >= 20 then if lIli1l1I11il1liiillIl < 21 then local llIlli1l11l11IiliIi, l1IIi1I1ll11i1llIii if lIliii1l1iil1Il1IIili[9] then llIlli1l11l11IiliIi = lIliii1l1iil1Il1IIili[3] else llIlli1l11l11IiliIi = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[1]] end if lIliii1l1iil1Il1IIili[6] then l1IIi1I1ll11i1llIii = lIliii1l1iil1Il1IIili[4] else l1IIi1I1ll11i1llIii = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[2]] end ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]][llIlli1l11l11IiliIi] = l1IIi1I1ll11i1llIii elseif lIli1l1I11il1liiillIl ~= 22 then local iilIlliIl1Il1lIlI1l = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[1]] for lIlllI1i11iIi11l1Ilil = lIliii1l1iil1Il1IIili[1] + 1, lIliii1l1iil1Il1IIili[2] do iilIlliIl1Il1lIlI1l = iilIlliIl1Il1lIlI1l .. ii11iIi1llllI1I1i1I[lIlllI1i11iIi11l1Ilil] end ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = iilIlliIl1Il1lIlI1l else ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]] = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[1]] end elseif lIli1l1I11il1liiillIl < 18 then local llIlli1l11l11IiliIi, l1IIi1I1ll11i1llIii if lIliii1l1iil1Il1IIili[9] then llIlli1l11l11IiliIi = lIliii1l1iil1Il1IIili[3] else llIlli1l11l11IiliIi = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[1]] end if lIliii1l1iil1Il1IIili[6] then l1IIi1I1ll11i1llIii = lIliii1l1iil1Il1IIili[4] else l1IIi1I1ll11i1llIii = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[2]] end if llIlli1l11l11IiliIi == l1IIi1I1ll11i1llIii ~= (lIliii1l1iil1Il1IIili[8] ~= 0) then lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 + 1 end elseif lIli1l1I11il1liiillIl == 19 then local lIl11l1I111lIlIIIiIIi = (lIliii1l1iil1Il1IIili[2] - 1) * 50 local ll1Iilll1II1llli1l1 = lIliii1l1iil1Il1IIili[1] if ll1Iilll1II1llli1l1 == 0 then ll1Iilll1II1llli1l1 = lIliiII1III1I11liII11 - lIliii1l1iil1Il1IIili[8] end for lIlllI1i11iIi11l1Ilil = 1, ll1Iilll1II1llli1l1 do ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8]][lIl11l1I111lIlIIIiIIi + lIlllI1i11iIi11l1Ilil] = ii11iIi1llllI1I1i1I[lIliii1l1iil1Il1IIili[8] + lIlllI1i11iIi11l1Ilil] end else lI1i1IiIII1IlliiiI1 = lI1i1IiIII1IlliiiI1 + (lIliii1l1iil1Il1IIili[7] - lIllIl1lIli11lii111Il) end end end local IIIIiiIl1li1Iii1i1i, i11iIIIiIiill1il1Ii, lIll1iI1l111III1Iiili, lIl111l1iIi1l111I11lI = lIIIIIlIIlll11lii1l(Iil1iilili1i1Iii11l) if IIIIiiIl1li1Iii1i1i then if lIll1iI1l111III1Iiili then return l1l11i1illlIlii11Il(ii11iIi1llllI1I1i1I, lIll1iI1l111III1Iiili, lIl111l1iIi1l111I11lI) end else lIl1IIli11ll1l11IiliI("Luraph Script:" .. (I1il11l1Ii1111IIII1[lI1i1IiIII1IlliiiI1 - 1] or "") .. ": " .. llililliIl1IlIiIl1i(i11iIIIiIiill1il1Ii), 0) end end I1IiIilliII1l111ii1(lIiiIi11IIiili11i1i, llI1il1ilIll1Ii1i1l) return lIiiIi11IIiili11i1i end local lIlliiiili1liililI1ii = ii1IIllI1iiill1Il1I() return lIl1li1IIIll1lIl1111I(lIlliiiili1liililI1ii, llI1il1ilIll1Ii1i1l)() end return iIlI1III1l1IIliillIlIi1I1llilI1liiI1()) 